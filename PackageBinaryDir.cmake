# ================================================================================================ #
#  PACKAGE_BINARY_DIR( PACKAGE <package> VARIABLE <variable> )                                     #
#                                                                                                  #
# This function detect binary dir of an imported target
#
# <package> - The imported target whose bin path is to be located.
# <variable> - Name of the variable to which the path is to be written.

if(__package_binary_dir)
    return()
endif()
set(__package_binary_dir YES)

if(WIN32)
    macro(package_binary_dir)
        set(options )
        set(oneValueArgs PACKAGE VARIABLE)
        set(multiValueArgs )
        cmake_parse_arguments(PACKAGE "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
        if(NOT PACKAGE_PACKAGE)
            message(FATAL_ERROR "You must specify at least one imported target!")
        endif()
        if(NOT PACKAGE_VARIABLE)
            message(FATAL_ERROR "You must specify a destination variable for the path!")
        endif()
        if(TARGET ${PACKAGE_PACKAGE})
            get_target_property(one_trg_type ${PACKAGE_PACKAGE} TYPE)
            if("${one_trg_type}" STREQUAL "SHARED_LIBRARY")
                get_target_property(one_trg_dll_location_release ${PACKAGE_PACKAGE} IMPORTED_LOCATION_RELEASE)
                if(one_trg_dll_location_release MATCHES ".dll$")
                    set(dll_release ${one_trg_dll_location_release})
                endif()
                get_target_property(one_trg_dll_location_debug ${PACKAGE_PACKAGE} IMPORTED_LOCATION_DEBUG)
                if(one_trg_dll_location_debug MATCHES ".dll$")
                    set(dll_debug ${one_trg_dll_location_debug})
                endif()
                if(NOT EXISTS ${dll_release})
                    get_target_property(one_trg_dll_location_release ${PACKAGE_PACKAGE} IMPORTED_IMPLIB_RELEASE)
                    if(one_trg_dll_location_release MATCHES ".lib$")
                        cmake_path(GET one_trg_dll_location_release PARENT_PATH _lib_dir)
                        cmake_path(GET one_trg_dll_location_release STEM _lib_name)
                        set(dll_test "${_lib_dir}/${_lib_name}.dll")
                        if(EXISTS ${dll_test})
                            set(dll_release ${one_trg_dll_location_release})
                        else()
                            set(dll_test "../bin/${_lib_name}.dll")
                            cmake_path(ABSOLUTE_PATH dll_test BASE_DIRECTORY ${_lib_dir} NORMALIZE OUTPUT_VARIABLE dll_test)
                            if(EXISTS ${dll_test})
                                set(dll_release ${one_trg_dll_location_release})
                            endif()
                        endif()
                    endif()
                endif()
                if(NOT EXISTS ${dll_debug})
                    get_target_property(one_trg_dll_location_debug ${PACKAGE_PACKAGE} IMPORTED_IMPLIB_DEBUG)
                    if(one_trg_dll_location_debug MATCHES ".lib$")
                        cmake_path(GET one_trg_dll_location_debug PARENT_PATH _lib_dir)
                        cmake_path(GET one_trg_dll_location_debug STEM _lib_name)
                        set(dll_test "${_lib_dir}/${_lib_name}.dll")
                        if(EXISTS ${dll_test})
                            set(dll_debug ${one_trg_dll_location_debug})
                        else()
                            set(dll_test "../bin/${_lib_name}.dll")
                            cmake_path(ABSOLUTE_PATH dll_test BASE_DIRECTORY ${_lib_dir} NORMALIZE OUTPUT_VARIABLE dll_test)
                            if(EXISTS ${dll_test})
                                set(dll_debug ${one_trg_dll_location_debug})
                            endif()
                        endif()
                    endif()
                endif()
                if(NOT EXISTS ${dll_debug} AND NOT EXISTS ${dll_release})
                    get_target_property(one_trg_dll_location_both ${PACKAGE_PACKAGE} IMPORTED_LOCATION)
                    if(one_trg_dll_location_both MATCHES ".dll$")
                        set(dll_release ${one_trg_dll_location_both})
                        set(dll_debug ${one_trg_dll_location_both})
                    endif()
                endif()
                if(NOT EXISTS ${dll_debug} AND EXISTS ${dll_release})
                    set(dll_debug ${dll_release})
                endif()
                if(EXISTS ${dll_debug})
                    cmake_path(GET dll_debug PARENT_PATH ${PACKAGE_VARIABLE})
                endif()
                if(EXISTS ${dll_release})
                    cmake_path(GET dll_release PARENT_PATH ${PACKAGE_VARIABLE})
                endif()
            endif()
        endif()
    endmacro()
endif()
