# ================================================================================================ #
#  COPY_IMPORTED_DLL_FILES( DESTINATION <destination> [IMPORTED <imported target>]... [INSTALL] )  #
#                                                                                                  #
# This function creates a Windows resource file.
#
# <destination> - A target into whose file output the DLLs are to be copied.
# <imported target> - The argument can be given several times and specifies the imported target whose DLLs are to be copied.
# INSTALL - If the switch is set, the DLLs are automatically installed as well.

if(__copy_imported_dll_files)
    return()
endif()
set(__copy_imported_dll_files YES)

if(WIN32)
    function(copy_imported_dll_files)
        set(options INSTALL)
        set(oneValueArgs DESTINATION)
        set(multiValueArgs IMPORTED)
        cmake_parse_arguments(DLLS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
        if(NOT DLLS_IMPORTED)
            message(FATAL_ERROR "You must specify at least one imported target from which the DLLs are to be copied!")
        endif()
        if(NOT DLLS_DESTINATION)
            message(FATAL_ERROR "You must specify a destination for the copies!")
        endif()
        foreach(itg ${DLLS_IMPORTED})
            if(TARGET ${itg})
                get_target_property(one_trg_type ${itg} TYPE)
                if("${one_trg_type}" STREQUAL "SHARED_LIBRARY")
                    get_target_property(one_trg_dll_location_release ${itg} IMPORTED_LOCATION_RELEASE)
                    if(one_trg_dll_location_release MATCHES ".dll$")
                        set(dll_release ${one_trg_dll_location_release})
                    endif()
                    get_target_property(one_trg_dll_location_debug ${itg} IMPORTED_LOCATION_DEBUG)
                    if(one_trg_dll_location_debug MATCHES ".dll$")
                        set(dll_debug ${one_trg_dll_location_debug})
                    endif()
                    if(NOT EXISTS ${dll_release})
                        get_target_property(one_trg_dll_location_release ${itg} IMPORTED_IMPLIB_RELEASE)
                        if(one_trg_dll_location_release MATCHES ".lib$")
                            cmake_path(GET one_trg_dll_location_release PARENT_PATH _lib_dir)
                            cmake_path(GET one_trg_dll_location_release STEM _lib_name)
                            set(dll_test "${_lib_dir}/${_lib_name}.dll")
                            if(EXISTS ${dll_test})
                                set(dll_release ${one_trg_dll_location_release})
                            else()
                                set(dll_test "../bin/${_lib_name}.dll")
                                cmake_path(ABSOLUTE_PATH dll_test BASE_DIRECTORY ${_lib_dir} NORMALIZE OUTPUT_VARIABLE dll_test)
                                if(EXISTS ${dll_test})
                                    set(dll_release ${one_trg_dll_location_release})
                                endif()
                            endif()
                        endif()
                    endif()
                    if(NOT EXISTS ${dll_debug})
                        get_target_property(one_trg_dll_location_debug ${itg} IMPORTED_IMPLIB_DEBUG)
                        if(one_trg_dll_location_debug MATCHES ".lib$")
                            cmake_path(GET one_trg_dll_location_debug PARENT_PATH _lib_dir)
                            cmake_path(GET one_trg_dll_location_debug STEM _lib_name)
                            set(dll_test "${_lib_dir}/${_lib_name}.dll")
                            if(EXISTS ${dll_test})
                                set(dll_debug ${one_trg_dll_location_debug})
                            else()
                                set(dll_test "../bin/${_lib_name}.dll")
                                cmake_path(ABSOLUTE_PATH dll_test BASE_DIRECTORY ${_lib_dir} NORMALIZE OUTPUT_VARIABLE dll_test)
                                if(EXISTS ${dll_test})
                                    set(dll_debug ${one_trg_dll_location_debug})
                                endif()
                            endif()
                        endif()
                    endif()
                    if(NOT EXISTS ${dll_debug} AND NOT EXISTS ${dll_release})
                        get_target_property(one_trg_dll_location_both ${itg} IMPORTED_LOCATION)
                        if(one_trg_dll_location_both MATCHES ".dll$")
                            set(dll_release ${one_trg_dll_location_both})
                            set(dll_debug ${one_trg_dll_location_both})
                        endif()
                    endif()
                    if(NOT EXISTS ${dll_debug} AND EXISTS ${dll_release})
                        set(dll_debug ${dll_release})
                    endif()
                    if(DLLS_INSTALL AND EXISTS ${dll_release})
                        install(FILES ${dll_release} TYPE BIN CONFIGURATIONS Release)
                    endif()
                    if(DLLS_INSTALL AND EXISTS ${dll_debug})
                        install(FILES ${dll_debug} TYPE BIN CONFIGURATIONS Debug)
                    endif()
                    if(EXISTS ${dll_debug} AND EXISTS ${dll_release})
                        if(TARGET ${DLLS_DESTINATION})
                            message(STATUS "Copy DLLs of imported target ${itg}: ${dll_debug}, ${dll_release}")
                            add_custom_command(TARGET ${DLLS_DESTINATION} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different $<$<CONFIG:Debug>:${dll_debug}> $<$<NOT:$<CONFIG:Debug>>:${dll_release}> $<TARGET_FILE_DIR:${DLLS_DESTINATION}>)
                        endif()
                    endif()
                endif()
            endif()
        endforeach()
    endfunction()
endif()
